import json
from tiktok_downloader.decoder import decoder
y = decoder('', 86, 'JXdGCcweO', 4, 5, 22)
print(y)